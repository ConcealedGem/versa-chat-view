# HTTP 重定向到 HTTPS
server {
    server_name copilot.hw.echo-isoftstone.com;
    listen 80;
    rewrite ^(.*)$ https://$server_name$1 permanent;
}

# HTTPS 主服务器配置
server {
    listen 443 ssl http2;
    server_name copilot.hw.echo-isoftstone.com;
    
    # SSL 证书配置
    ssl_certificate /usr/share/nginx/ssl_certs/hw.echo-isoftstone.com/hw.echo-isoftstone.com.cert.pem;
    ssl_certificate_key /usr/share/nginx/ssl_certs/hw.echo-isoftstone.com/hw.echo-isoftstone.com.key.pem;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
    ssl_prefer_server_ciphers on;

    # 静态文件服务
    location / {
        root /usr/share/nginx/html/chatbiweb;
        try_files $uri $uri/ /index.html;
    }

    # API 代理配置 - 支持 SSE 流式传输
    location /api/ {
        proxy_pass http://10.137.79.244:38088;
        
        # 基本代理头部
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SSE 关键配置 - 禁用缓冲（解决流式传输问题的核心！）
        proxy_buffering off;                    # 关闭代理缓冲
        proxy_cache off;                        # 关闭代理缓存
        proxy_request_buffering off;            # 禁用请求缓冲
        proxy_read_timeout 24h;                 # 延长读取超时
        proxy_connect_timeout 60s;              # 连接超时
        proxy_send_timeout 60s;                 # 发送超时
        
        # HTTP 版本和连接设置
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # nginx 特有的禁用缓冲指令（关键！）
        proxy_set_header X-Accel-Buffering "no";
        
        # SSE 专用头部
        proxy_set_header Cache-Control "no-cache, no-transform";
        proxy_set_header Pragma "no-cache";
        proxy_set_header Expires "0";
        
        # CORS 头部（如果需要跨域）
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        
        # 处理 OPTIONS 预检请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # 视频文件服务（保持您的原始配置）
    location ~ ^/videos/(.+)\.mp4$ {
        alias /usr/share/nginx/html/videos/$1.mp4;
        mp4;
        mp4_buffer_size 1m;
        mp4_max_buffer_size 10m;
    }

    # 路由回退（保持您的原始配置）
    location @router {
        rewrite ^.*$ /index.html last;
    }

    # 错误页面（保持您的原始配置）
    error_page 404 500 502 503 504 /502.html;
    location = /502.html {
        root /usr/share/nginx/www;
    }
    
    # 安全头部（建议添加）
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
} 